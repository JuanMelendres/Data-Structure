/*
    Juan Antonio Melendres Villa A00369017
    Write a program in Java that receives n fractions and sort them using :
        a) insertion Sort
        b) selection sort
        c) bubble sort
        d) Merge Sort
        e) Quick Sort
    The program has to display the SORTED fractions and the time that take each method to complete.
    The times has to be displayed sorted from lowest to highest
*/

import java.util.Scanner;
import java.util.ArrayList;

public class Main extends Comparable {

    public static void selectionSort(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int min_idx = i;
            for (int j = i+  1; j < n; j++) {
                if (arr[j] < arr[min_idx]) {
                    min_idx = j;
                }
            }
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }

    public static  void insertionSort(int arr[]) {
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j-1;
            }
            arr[j+1] = key;
        }
    }

    public static void bubbleSort(int arr[]){
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n -i -1; j++) {
                if (arr[j] > arr[j + 1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }

    public static void merge(int arr[], int l, int m, int r){
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int [n1];
        int R[] = new int [n2];
        for (int i = 0; i < n1; ++i) {
            L[i] = arr[l + i];
        }
        for (int j = 0; j < n2; ++j) {
            R[j] = arr[m + 1+ j];
        }
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2){
            if (L[i] <= R[j]){
                arr[k] = L[i];
                i++;
            }
            else{
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1){
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2){
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    public static void mergeSort(int arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr , m+  1, r);
            merge(arr, l, m, r);
        }
    }

    public static int partition(int arr[], int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }

    public static void quickSort(int arr[], int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    public static void printArray(String arr[]) {
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i].equals("1/2")) {
                System.out.println(arr[i]);
            }
            else if (arr[i].equals("2/2")) {
                System.out.println(arr[i]);
            }
            else if (arr[i].equals("2/3")) {
                System.out.println(arr[i]);
            }

        }
        System.out.println();
    }

    public static String[] division(int arr[]) {
        String[] div = new String[6];
        for (int i = 0; i < 6; ++i) {
                div[i] = "" + arr[i] + "/" + arr[i+1] + "";
        }
        return div;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> numeros = new ArrayList<Integer>();
        int tamano = 0;
        System.out.print("Ingresa el tamaño del array: ");
        tamano = sc.nextInt();
        for (int i = 0; i < tamano; i++) {
            numeros.add(sc.nextInt());
        }
        int[] arr = new int[tamano];
        for (int i = 0; i < tamano; i++) {
            arr[i] = numeros.get(i);
        }
        //SelectionSort
        long inicio, fin;
        inicio = System.currentTimeMillis();
        Main.selectionSort(arr);
        System.out.println("SelectionSort");
        printArray(division(arr));
        fin = System.currentTimeMillis();
        //InsertionSort
        long inicio1, fin1;
        inicio1 = System.currentTimeMillis();
        Main.insertionSort(arr);
        System.out.println("InsertionSort");
        printArray(division(arr));
        fin1 = System.currentTimeMillis();
        //BubbleSort
        long inicio2, fin2;
        inicio2 = System.currentTimeMillis();
        Main.bubbleSort(arr);
        System.out.println("BubbleSort");
        printArray(division(arr));
        fin2 = System.currentTimeMillis();
        //MergeSort
        long inicio3, fin3;
        inicio3 = System.currentTimeMillis();
        Main.mergeSort(arr, 0, arr.length-1);
        System.out.println("MergeSort");
        printArray(division(arr));
        fin3 = System.currentTimeMillis();
        //QuickSort
        long inicio4, fin4;
        inicio4 = System.currentTimeMillis();
        Main.mergeSort(arr, 0, arr.length-1);
        System.out.println("QuickSort");
        printArray(division(arr));
        fin4 = System.currentTimeMillis();
        System.out.println("Tiempo de ejecución de Selection Sort en milisegundos: " + (double)(fin - inicio));
        System.out.println("Tiempo de ejecución de InsertionSort en milisegundos: " + (double)(fin1 - inicio1));
        System.out.println("Tiempo de ejecución de BubbleSort en milisegundos: " + (double)(fin2 - inicio2));
        System.out.println("Tiempo de ejecución de MergeSort en milisegundos: " + (double)(fin3 - inicio3));
        System.out.println("Tiempo de ejecución de QuickSort en milisegundos: " + (double)(fin4 - inicio4));
    }

}
